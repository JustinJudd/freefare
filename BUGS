Bugs in the libfreefare that affect this project.

mifare_ultralight.c

 * function mifare_ultralightc_authenticate does not set errno on encryption
   failure. This could make finding what kind of error happened a little bit
   more difficult. Anyway, cgo clears errno before any C call so this should not
   affect us in most circumstances. (Reported as issue #20, fixed)

mifare_desfire_key.c

* Objects of type MifareDESFireKey are opaque and allocated by the libfreefare.
  This makes it more difficult than it could be to wrap the library. These
  objects are not tied to any ressources and should therefore be treatable like
  any other "disposable" object. But because Go cannot track their allocation,
  the user of the Go wrapper has to manually keep track of MifareDESFireKeys.
  This is a huge inconvenience which could be entirely avoided by adding a
  callback to the libfreefare that allows a user to provide its own allocation
  function. (Reported as issue #21)

mifare_classic.c

* Some functions that assume a MifareTag is a Mifare Classic Tag don't check if
  that assumption holds. The wrapper has to perform extra checks to avoid memory
  corruption from invalid input data. (Reported as issue #23)

mifare_application.c

* The function mifare_application_free does not check for the possibility that
  mifare_application_find returned a NULL pointer. The libfreefare crashes when
  you try to delete a nonexisting application or when malloc returned NULL in
  mifare_application_find (Reported as issue #24 with patch). A similar issue
  exists with mifare_application_write. Even though the function checks the
  return valueo of mifare_application_find, it does not check if the NULL result
  came from malloc-failure and unconditionally returns EBADF instead of ENOMEM.
  (Reported as additional patch to issue #23)
